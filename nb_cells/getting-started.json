[
        {
            "id": 3,
            "value": "md`# Getting Started (Learn JS Data)\n\n*This notebook was generated from the [learnjsdata source](https://github.com/vlandham/js_data) and updated.*\n\n## About Tasks\n\nThis guide is broken up into a number of tasks, which we can think of as little modules or _recipes_. Each task tries to encapsulate a concrete lesson around common data manipulation and analysis processes. Tasks attempt to be self-contained and stay focused on the, well, _task at hand_. This guide was built with for client side data processing (in the browser), but can easily be used in a server side (Node) application with a bit of tweaking.\n\n## Why D3?\n\n[D3.js](http://d3js.org/) is largely known for its data visualization capabilities - and for good reason. It is quickly becoming the de facto standard for interactive visualization on the web.\nIts core feature of binding data to visual representations happens to require a lot of manipulation of said data. Thus, while this toolkit is focused around visualization, it is well suited for data processing as well!\nAnd, a typical output for data manipulation is at least some sort of visualization of that data, in which case you are all ready to go.\n\n## A Note about D3v5 and D3v4\n\nIn the not too distant past, a major rewrite of the D3.js library was completed and released into the wild. In includes quite a few API changes and a [very modular structure](https://github.com/d3) (meaning in theory you can just use the bits of D3 that you want and not the rest).\nThe v4 release makes D3 a lot better - but it also makes it more challenging to read and use old code and sometimes to understand the documentation. With the v5 release, there have been a few more changes (most significantly in reading data) although most v4 code will continue to run with minimal changes.  The [D3v3](http://learnjsdata.com/v3) and [D3v4](http://learnjsdata.com) versions are still available if you have old code you need help with.\n\n## Why lodash?\n\n[Lodash](https://lodash.com) is fast, popular, and fills in some holes in D3's processing features. Plus, it's functional style and chaining capabilities make it work well alongside D3.\n\n## Code Snippets\n\nThere are a bunch of useful snippets in this guide. Here is an example:\n`",
            "pinned": false
        },
        {
            "id": 4,
            "value": "theMax = d3.max([1,2,20,3])",
            "pinned": true
        },
        {
            "id": 5,
            "value": "md`\nClick the caret to collapse or expand a cell.\n\n## Why Observable?\n\nIn contrast to previous versions of this guide, the code does not make use of \\`console.log\\` and instead uses Observable's inline outputs. This provides a more interactive experience in a single browser frame; you can edit any cell and re-run it. For example, go change the 1 in the previous cell to 100 and press \\`Shift+Enter\\` to re-execute the cell. You can also insert new cells using the \\`+\\` after any cell to try out your own ideas.\n\nIn Observable, you may have noticed that there are some differences in how the results are displayed. First, the results are displayed _above_ the code instead of below them. Unforunately, this doesn't seem to work as well for a tutorial and has been a source of [some disagreement](https://talk.observablehq.com/t/new-notebook-cell-toggle-ui-feedback-wanted/379). A second difference is that Observable allows only one global variable to be defined in each cell, usually in a one-line statement (without a semi-colon). Cells are _reactive_ so a change to that global variable triggers updates in all cells that reference that variable. This means that a global variable _cannot_ be defined in more than one cell. You will notice that certain variables have numeric suffixes (e.g. \\`regex2, regex3, ...\\`) to adhere to this rule. Finally, because each cell produces a single output, we have split up some snippets and wrap blocks of code in brackets, assigning the output value via a return statement. For example,`",
            "pinned": false
        },
        {
            "id": 27,
            "value": "theRange = {\n  const d = [1,2,20,3],\n        theMin = d3.min(d),\n        theMax = d3.max(d);\n  return theMax - theMin;\n} ",
            "pinned": true
        },
        {
            "id": 25,
            "value": "md`Snippets in this guide that are not pure JavaScript will have the functions prefixed with the libraries used to make them work (\\`d3\\` for D3 and \\`_\\` for lodash). The libraries are made available via \\`require()\\` calls that are at the bottom of each notebook.\n\n## Using this Guide Outside of Observable\n\nIf you wish to use this guide outside of Observable, you will need to manage libraries and run a local server to read data. Below are some tips for doing this.\n\n### Preparing Your Site for Data Processing\n\nTo get started using these tools for your data processing, you are going to want to include them in your html file along with a JavaScript file to perform the analysis.\nI typically download these scripts and include local copies in my page. You can keep \"libraries\" that you are using but didn't write in a \\`lib\\` folder, and the code you write yourself in a \\`src\\` folder. Then you want to load all these files on an HTML page. To do this, you would want to have your HTML look something like this:\n\n\\`\\`\\`html\n<!doctype html>\n<html>\n<head>\n</head>\n<body>\n<script src='lib/d3.js'></script>\n<script src='lib/lodash.js'></script>\n<script src='src/analysis.js'></script>\n</body>\n</html>\n\\`\\`\\`\n\n\\`src/analysis.js\\` would be where your analysis code goes. I put these \\`script\\` tags at the end of the \\`body\\` - just so that if there is other content on the page, it won't be delayed in loading. Typically, I name this main HTML file \\`index.html\\` - so that its loaded automatically as the root page.\n\n### Running a Local Server\n\nD3's functions for [reading data](read_data.html) require you be running the page from a server. You can do this on your own machine by running a local server out of the root directory of your site.\nThere are many options for easy-to-spin-up web servers:\n\n- [SimpleHTTPServer](http://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/) for Python\n- [httpd](http://www.benjaminoakes.com/2013/09/13/ruby-simple-http-server-minimalist-rake/) for Ruby\n- [http-server](https://github.com/nodeapps/http-server) for Node\n\nLately, I have been using that last option - \\`http-server\\`. If you have [Node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed, you can grab the required package by installing it from the command line:\n\n\\`\\`\\`bash\nnpm install -g http-server\n\\`\\`\\`\n\n(The \\`-g\\` flag stands for _global_ - which allows you to access \\`http-server\\` from any directory on your machine.\nThen \\`cd\\` to your analysis directory and start it up!\n\n\\`\\`\\`bash\ncd /path/to/dir\nhttp-server\n\\`\\`\\`\n\nIn your web browser, open up [http://0.0.0.0:8080](http://0.0.0.0:8080) and you should be ready to go!\n\n## See Also\n\n- [Installing Node](http://howtonode.org/how-to-install-nodejs) - if you need some help getting \\`http-server\\` on your machine.\n\n## Navigation\n\n- Next Task: [Reading in Data](/@dakoop/reading-in-data-learn-js-data)\n- [Learn JS Data Notebooks Index](/@dakoop/learn-js-data)\n`",
            "pinned": false
        },
        {
            "id": 13,
            "value": "d3 = require('d3')",
            "pinned": false
        }
    ]
