[
        {
            "id": 3,
            "value": "md`# Combining Data (Learn JS Data)\n\n*This notebook was generated from the [learnjsdata source](https://github.com/vlandham/js_data) and updated.*\n\n_Note: This task was very generously contributed by [Timo Grossenbacher](http://timogrossenbacher.ch/) - Geographer and Data Specialist extraordinaire. Thanks very much Timo!_\n\nOften, you have to combine two or more different data sets because they contain complementary information. Or, for example, the data come in chunks from the server and need to be reassembled on the client side.\n\nCombining or _merging_ data may involve one of the following tasks:\n\n* Combine data sets by one or more common attributes\n* Add together rows from different data sets\n* Combine attributes from different data sets\n\n## Combine data sets by one or more common attributes\n\nLet's say we have a list of the following articles:\n\n`",
            "pinned": false
        },
        {
            "id": 4,
            "value": "articles = [{\n    \"id\": 1,\n    \"name\": \"vacuum cleaner\",\n    \"weight\": 9.9,\n    \"price\": 89.9,\n    \"brand_id\": 2\n}, {\n    \"id\": 2,\n    \"name\": \"washing machine\",\n    \"weight\": 540,\n    \"price\": 230,\n    \"brand_id\": 1\n}, {\n    \"id\": 3,\n    \"name\": \"hair dryer\",\n    \"weight\": 1.2,\n    \"price\": 24.99,\n    \"brand_id\": 2\n}, {\n    \"id\": 4,\n    \"name\": \"super fast laptop\",\n    \"weight\": 400,\n    \"price\": 899.9,\n    \"brand_id\": 3\n}]",
            "pinned": true
        },
        {
            "id": 5,
            "value": "md`And of the following brands:\n\n`",
            "pinned": false
        },
        {
            "id": 6,
            "value": "brands = [{\n    \"id\": 1,\n    \"name\": \"SuperKitchen\"\n}, {\n    \"id\": 2,\n    \"name\": \"HomeSweetHome\"\n}]",
            "pinned": true
        },
        {
            "id": 7,
            "value": "md`As you can see, in each article, \\`brand_id\\` points to a particular brand, whose details are saved in another data set - which can be considered a *lookup table* in this case. This is often how separate data schemes are stored in a server-side database. Also note that the last article in the list has a \\`brand_id\\` for which no brand is stored in \\`brands\\`.\n\nWhat we want to do now is to combine both datasets, so we can reference the brand's \\`name\\` directly from an article. There are several ways to achieve this.\n\n### Using native \\`Array\\` functions\n\nWe can implement a simple join (*left outer join* in database terms) using native, i.e., already existing \\`Array\\` functions as follows. The method presented here modifies the \\`joinedArticles\\` array *in place* by adding a new key-value-pair for \\`brand\\`.\n\n`",
            "pinned": false
        },
        {
            "id": 8,
            "value": "{\n  let joinedArticles = [...articles]; // copy articles\n  joinedArticles.forEach(function(article) {\n    var result = brands.filter(function(brand) {\n        return brand.id === article.brand_id;\n    });\n    delete article.brand_id;\n    article.brand = (result[0] !== undefined) ? result[0].name : null;\n  })\n  return joinedArticles;\n}",
            "pinned": true
        },
        {
            "id": 9,
            "value": "md`*We first copy \\`articles\\` since this is an in-place modification and we do not want to overwrite the original values. This makes use of the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)*.\n\nIn the code, we loop over each \\`article\\`, where we take its \\`brand_id\\` to look up the corresponding \\`brand\\` using the native \\`filter\\` function. Note that this function returns an array and we expect it to have only one element. In case there is no corresponding \\`brand\\`, \\`result[0]\\` will be \\`undefined\\`, and in order to prevent an error (something like \\`result[0] is undefined\\`), we use the ternary operator.\n\nAlso, as we no longer need \\`brand_id\\` after the lookup has been done, we can safely delete it.\n\nIf we want to join by more than one attribute, we can modify the filter function to achieve this. Hypothetically, this might look something like:\n\n\\`\\`\\`js\ninnerArray.filter(function(innerArrayItem) {\n    return innerArrayItem.idA === outerArrayItem.idA &&\n        innerArrayItem.idB === outerArrayItem.idB;\n});\n\\`\\`\\`\n\n### Using a generic and more efficient approach\n\nA more generic, and also more performant version of a join is proposed below (abbreviated from [this StackOverflow answer](http://stackoverflow.com/questions/17500312/is-there-some-way-i-can-join-the-contents-of-two-javascript-arrays-much-like-i/17500836#17500836)). Its output is equivalent to the one of the above method.\n\n`",
            "pinned": false
        },
        {
            "id": 10,
            "value": "function join(lookupTable, mainTable, lookupKey, mainKey, select) {\n    var l = lookupTable.length,\n        m = mainTable.length,\n        lookupIndex = [],\n        output = [];\n    for (var i = 0; i < l; i++) { // loop through l items\n        var row = lookupTable[i];\n        lookupIndex[row[lookupKey]] = row; // create an index for lookup table\n    }\n    for (var j = 0; j < m; j++) { // loop through m items\n        var y = mainTable[j];\n        var x = lookupIndex[y[mainKey]]; // get corresponding row from lookupTable\n        output.push(select(y, x)); // select only the columns you need\n    }\n    return output;\n}",
            "pinned": true
        },
        {
            "id": 11,
            "value": "md`Because above defined function creates an index for the \\`lookupTable\\` (in our case \\`brands\\`) in the first iteration, it runs considerably faster than the previously shown method. Also, via a callback, it allows us to directly define which keys (or \"attributes\") we want to retain in the resulting, joined array (\\`output\\`). It is used like so:\n\n`",
            "pinned": false
        },
        {
            "id": 12,
            "value": "join(brands, articles, \"id\", \"brand_id\", function(article, brand) {\n    return {\n        id: article.id,\n        name: article.name,\n        weight: article.weight,\n        price: article.price,\n        brand: (brand !== undefined) ? brand.name : null\n    };\n})",
            "pinned": true
        },
        {
            "id": 13,
            "value": "md`Note that we don't modify \\`articles\\` *in place* but create a new array.\n\n## Add together rows from different data sets\n\nLet's say we want to load a huge data set from the server, but because of network performance reasons, we load it in three chunks and reassemble it on the client side. Using Promises, as illustrated in [reading in data](read_data.html), we get the data and immediately combine it. For this, we can use D3's \\`merge\\` to combine the single arrays one after another. In database terms, this operation is called \"union\".\n\n`",
            "pinned": false
        },
        {
            "id": 14,
            "value": "Promise.all([d3.csv(\"https://cdn.rawgit.com/vlandham/js_data/master/data/big_data_1.csv\"),\n             d3.csv(\"https://cdn.rawgit.com/vlandham/js_data/master/data/big_data_2.csv\"),\n             d3.csv(\"https://cdn.rawgit.com/vlandham/js_data/master/data/big_data_3.csv\")])\n  .then((big_datas) => d3.merge(big_datas))",
            "pinned": true
        },
        {
            "id": 15,
            "value": "md`*We can use [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) to more quickly define simple functions.*\n\nNote that the argument passed to \\`d3.merge\\` must be an array.\n\n## Combine attributes from different data sets\n\nIn the last case, we have two or more data sets that contain attributes describing the same observations, or conceptual entities, and they need to be combined. This implies that all data sets have the same length. For example, \\`dataset_1\\` below contains two observations of attribute \\`type\\` and attribute \\`model\\`, while \\`dataset_2\\` contains the same two entities, but observed through attributes \\`price\\` and \\`weight\\`.\n\n`",
            "pinned": false
        },
        {
            "id": 16,
            "value": "dataset_1 = [{\n    'type': 'boat',\n    'model': 'Ocean Queen 2000'\n}, {\n    'type': 'car',\n    'model': 'Ferrari'\n}]",
            "pinned": true
        },
        {
            "id": 47,
            "value": "\ndataset_2 = [{\n    'price': 23202020,\n    'weight': 5656.9\n}, {\n    'price': 59988,\n    'weight': 1.9\n}]",
            "pinned": true
        },
        {
            "id": 17,
            "value": "md`So in both data sets we essentially have separate information about the same conceptual entities, thus it makes sense to \"merge\" them, for which we can use  lodash's \\`merge\\` function:\n\n`",
            "pinned": false
        },
        {
            "id": 18,
            "value": "_.merge(dataset_1, dataset_2)",
            "pinned": true
        },
        {
            "id": 19,
            "value": "md`\n## Navigation\n- Next Task: [Summarizing Data](/@dakoop/summarizing-data-learn-js-data)\n- [Learn JS Data Notebooks Index](/@dakoop/learn-js-data)\n`",
            "pinned": false
        },
        {
            "id": 20,
            "value": "d3 = require('d3')",
            "pinned": false
        },
        {
            "id": 49,
            "value": "_ = require('lodash')",
            "pinned": false
        }
    ]
